#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssignProject.Modules.Amplitude
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AssignDatabase")]
	public partial class AssignDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSavedSetting(SavedSetting instance);
    partial void UpdateSavedSetting(SavedSetting instance);
    partial void DeleteSavedSetting(SavedSetting instance);
    #endregion
		
		public AssignDatabaseDataContext() : 
				base(global::AssignProject.Modules.Amplitude.Properties.Settings.Default.AssignDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AssignDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssignDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssignDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AssignDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AmplitudeTable> AmplitudeTables
		{
			get
			{
				return this.GetTable<AmplitudeTable>();
			}
		}
		
		public System.Data.Linq.Table<PulseWidthTable> PulseWidthTables
		{
			get
			{
				return this.GetTable<PulseWidthTable>();
			}
		}
		
		public System.Data.Linq.Table<RateTable> RateTables
		{
			get
			{
				return this.GetTable<RateTable>();
			}
		}
		
		public System.Data.Linq.Table<SavedSetting> SavedSettings
		{
			get
			{
				return this.GetTable<SavedSetting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AmplitudeTable")]
	public partial class AmplitudeTable
	{
		
		private System.Nullable<double> _AmplitudeValue;
		
		public AmplitudeTable()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmplitudeValue", DbType="Float")]
		public System.Nullable<double> AmplitudeValue
		{
			get
			{
				return this._AmplitudeValue;
			}
			set
			{
				if ((this._AmplitudeValue != value))
				{
					this._AmplitudeValue = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PulseWidthTable")]
	public partial class PulseWidthTable
	{
		
		private System.Nullable<int> _PulseWidthValues;
		
		public PulseWidthTable()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PulseWidthValues", DbType="Int")]
		public System.Nullable<int> PulseWidthValues
		{
			get
			{
				return this._PulseWidthValues;
			}
			set
			{
				if ((this._PulseWidthValues != value))
				{
					this._PulseWidthValues = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RateTable")]
	public partial class RateTable
	{
		
		private System.Nullable<int> _RateValue;
		
		public RateTable()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateValue", DbType="Int")]
		public System.Nullable<int> RateValue
		{
			get
			{
				return this._RateValue;
			}
			set
			{
				if ((this._RateValue != value))
				{
					this._RateValue = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SavedSettings")]
	public partial class SavedSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private System.Nullable<double> _MinAmplitude;
		
		private System.Nullable<int> _Pulse_Width;
		
		private System.Nullable<int> _Rate;
		
		private string _SLeadType;
		
		private string _SPortType;
		
		private string _SHemisphere;
		
		private System.Nullable<int> _Rating;
		
		private System.Nullable<double> _MaxAmplitude;
		
		private string _RampSpeed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnMinAmplitudeChanging(System.Nullable<double> value);
    partial void OnMinAmplitudeChanged();
    partial void OnPulse_WidthChanging(System.Nullable<int> value);
    partial void OnPulse_WidthChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnSLeadTypeChanging(string value);
    partial void OnSLeadTypeChanged();
    partial void OnSPortTypeChanging(string value);
    partial void OnSPortTypeChanged();
    partial void OnSHemisphereChanging(string value);
    partial void OnSHemisphereChanged();
    partial void OnRatingChanging(System.Nullable<int> value);
    partial void OnRatingChanged();
    partial void OnMaxAmplitudeChanging(System.Nullable<double> value);
    partial void OnMaxAmplitudeChanged();
    partial void OnRampSpeedChanging(string value);
    partial void OnRampSpeedChanged();
    #endregion
		
		public SavedSetting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinAmplitude", DbType="Float")]
		public System.Nullable<double> MinAmplitude
		{
			get
			{
				return this._MinAmplitude;
			}
			set
			{
				if ((this._MinAmplitude != value))
				{
					this.OnMinAmplitudeChanging(value);
					this.SendPropertyChanging();
					this._MinAmplitude = value;
					this.SendPropertyChanged("MinAmplitude");
					this.OnMinAmplitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Pulse Width]", Storage="_Pulse_Width", DbType="Int")]
		public System.Nullable<int> Pulse_Width
		{
			get
			{
				return this._Pulse_Width;
			}
			set
			{
				if ((this._Pulse_Width != value))
				{
					this.OnPulse_WidthChanging(value);
					this.SendPropertyChanging();
					this._Pulse_Width = value;
					this.SendPropertyChanged("Pulse_Width");
					this.OnPulse_WidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SLeadType", DbType="VarChar(50)")]
		public string SLeadType
		{
			get
			{
				return this._SLeadType;
			}
			set
			{
				if ((this._SLeadType != value))
				{
					this.OnSLeadTypeChanging(value);
					this.SendPropertyChanging();
					this._SLeadType = value;
					this.SendPropertyChanged("SLeadType");
					this.OnSLeadTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPortType", DbType="NChar(10)")]
		public string SPortType
		{
			get
			{
				return this._SPortType;
			}
			set
			{
				if ((this._SPortType != value))
				{
					this.OnSPortTypeChanging(value);
					this.SendPropertyChanging();
					this._SPortType = value;
					this.SendPropertyChanged("SPortType");
					this.OnSPortTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHemisphere", DbType="VarChar(50)")]
		public string SHemisphere
		{
			get
			{
				return this._SHemisphere;
			}
			set
			{
				if ((this._SHemisphere != value))
				{
					this.OnSHemisphereChanging(value);
					this.SendPropertyChanging();
					this._SHemisphere = value;
					this.SendPropertyChanged("SHemisphere");
					this.OnSHemisphereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int")]
		public System.Nullable<int> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxAmplitude", DbType="Float")]
		public System.Nullable<double> MaxAmplitude
		{
			get
			{
				return this._MaxAmplitude;
			}
			set
			{
				if ((this._MaxAmplitude != value))
				{
					this.OnMaxAmplitudeChanging(value);
					this.SendPropertyChanging();
					this._MaxAmplitude = value;
					this.SendPropertyChanged("MaxAmplitude");
					this.OnMaxAmplitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RampSpeed", DbType="VarChar(50)")]
		public string RampSpeed
		{
			get
			{
				return this._RampSpeed;
			}
			set
			{
				if ((this._RampSpeed != value))
				{
					this.OnRampSpeedChanging(value);
					this.SendPropertyChanging();
					this._RampSpeed = value;
					this.SendPropertyChanged("RampSpeed");
					this.OnRampSpeedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
